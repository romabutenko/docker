version: '3'

services:
  #  api:
  #    build:
  #      context: build-api
  #      args:
  #        - STAGE=${STAGE}
  #        - BRANCH=${BRANCH}
  #    env_file:
  #      - ./.env
  #    networks:
  #      - backend
  #    volumes:
  #      - ./../api/:${API_CODE_PATH_CONTAINER}

  #  web:
  #    image: "${COMPOSE_PROJECT_NAME}/${STAGE}/web:${BRANCH}"
  #    build:
  #      context: ./build-web
  #      args:
  #        - WEB_REPO=${WEB_REPO}
  #        - WEB_CODE_PATH_CONTAINER=${WEB_CODE_PATH_CONTAINER}
  #        - STAGE=${STAGE}
  #        - BRANCH=${BRANCH}
  #    env_file:
  #      - ./.env
  #    networks:
  #      - frontend
  #    volumes:
  #      - ./../web/:${WEB_CODE_PATH_CONTAINER}


  ### PHP-FPM ##############################################
  php-fpm:
    image: "${COMPOSE_PROJECT_NAME}/${STAGE}/php-fpm:${BRANCH}"
    build:
      context: ./php-fpm
      dockerfile: ./Dockerfile
      args:
        - PHP_VERSION=${PHP_VERSION}
        - PHP_TAG=${PHP_TAG}
        - http_proxy
        - https_proxy
        - no_proxy
    volumes:
      - ./php-fpm/php${PHP_VERSION}.ini:/usr/local/etc/php/php.ini
    expose:
      - "9000"
    extra_hosts:
      - "palantir.local:127.0.0.1"
    env_file:
      - ./.env
    networks:
      - backend
  #    depends_on:
  #      - api
  #      - web

  ### NGINX Server #########################################
  nginx:
    image: "${COMPOSE_PROJECT_NAME}/${STAGE}/nginx:${BRANCH}"
    build:
      context: ./nginx
      dockerfile: ./Dockerfile
      args:
        - NGINX_VERSION=${NGINX_VERSION}
        - PHP_UPSTREAM_CONTAINER=${NGINX_PHP_UPSTREAM_CONTAINER}
        - PHP_UPSTREAM_PORT=${NGINX_PHP_UPSTREAM_PORT}
        - CHANGE_SOURCE=${CHANGE_SOURCE}
        - http_proxy
        - https_proxy
        - no_proxy
    volumes:
      - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
      - ${NGINX_SITES_PATH}:/etc/nginx/sites-available
      - ${NGINX_SSL_PATH}:/etc/nginx/ssl
      - ${NGINX_ENTRYPOINT_INIT}:/docker-entrypoint-init.d
    ports:
      - ${NGINX_HOST_HTTP_PORT}:80
      - ${NGINX_HOST_HTTPS_PORT}:443
    depends_on:
      - php-fpm
    networks:
      - frontend
      - backend
    env_file:
      - ./.env
    links:
      - docker-in-docker

  mysql:
    image: "${COMPOSE_PROJECT_NAME}/${STAGE}/mysql:${BRANCH}"
    command: mysqld --default-authentication-plugin=mysql_native_password
    build:
      context: ./mysql
      args:
        - MYSQL_VERSION=${MYSQL_VERSION}
    environment:
      - MYSQL_VERSION=${MYSQL_VERSION}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=${WORKSPACE_TIMEZONE}
    volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
      - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
      - ${MYSQL_ENTRYPOINT_INIT}:/docker-entrypoint-init.d
    ports:
      - "${MYSQL_PORT}:3306"
    networks:
      - backend
    env_file:
      - ./.env
    links:
      - docker-in-docker

  ### Docker-in-Docker ################################################
  docker-in-docker:
    image: docker:dind
    env_file:
      - ./.env
    privileged: true
    volumes:
      - ${API_SOURCE_PATH}:${API_CONTAINER_PATH}
      - ${WEB_SOURCE_PATH}:${WEB_CONTAINER_PATH}
      - ${DATA_PATH_HOST}/dind:/var/lib/docker
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
      - ${ENTRYPOINTS}:/docker-entrypoint-init.d/
      - /var/run/docker.sock:/var/run/docker.sock
    expose:
      - 2375
    networks:
      - backend
#    command: "/bin/sh /docker-entrypoint-init.d/init.sh"
    command:
      - "for f in /docker-entrypoint-init.d/*; do /bin/sh $f; done"
      - "chmod +x ./set-entrypoints.sh"

networks:
  frontend:
    #    external:
    #      name: user_bridge
    # use the bridge driver, but enable IPv6
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: "true"
    ipam:
      driver: default
      config:
        - subnet: 172.21.193.208/29
  backend:
    #    external:
    #      name: user_bridge
    # use the bridge driver, but enable IPv6
    driver: bridge
    driver_opts:
      com.docker.network.enable_ipv6: "true"
    ipam:
      driver: default
      config:
        - subnet: 172.21.193.216/29
